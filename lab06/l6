Q1) i: A list is a countable number of ordered pairs the pairs are an index and 
       coresponding value 
    ii: First in last out data structure data is added to the top
    iii: First in first out structure data is added to the end
    iv: A collection of unique keys linked to values 

Q2) O(log(n)) where the base of log(n) is 2 as the number of elements               increases the output time tends to go towards 0


Q3) it would be done in constant time O(n) n-1 times  as every element would
    need to be examined, the more elements present the longer it takes

Q4) It would be preferable to use an linear search if the data is not sorted.
    Binary searches need to examine pre sorted data to function correctly.


Q5) *n* = Pivot Number [] = Sorted Number
    *84* 37 93 82 98 27 63 73 93 27 75 55 45 8 (Unsorted)
    *37*  82 27 63 73 27 75 55 45 8 [84] *93* 98 93
    *27* 27 8 [37] *82* 67 73 75 55 48 [84 93] *98* 93
    [8 27 27 37] *67* 73 75 55 48 [82 84 93 93 98]
    [8 27 27 37] *55* 48 [67] *73* 75 [82 84 93 93 98]
    [8 27 27 37 48 55 67 73 75 82 84 93 93 98](Sorted)

Q6) A stacked linked list [data|pointer] t[2] = ["3"|t[1]] t[1] = ["24"|t[0]] t[0] = ["06"|Null]
Q7) [13, [28, [24, [3, None]]]]

Q8) the string held in buffer,"on the footsteps of dawn" is coppied to s, then
    the function strcat appends,"... who's never ever been born" to the end of
    s. buffer is not modified after its strcpy assignment so it prints as is and
    s prints out the appended string
    

Q9){Jaga : 24, Jesse : 78, Cos : 86, Kate : 28, Nash : 11, Vera : 99, Bob :38}

Q10) int find( char *key, int *value);
     {
		int h = hash(*key);
		sNode* srch;
		for( srch=table[h]; srch != Null; srch=srch->next)
		{
			if ( strcmp( *key, srch->key ){
				srch->val = *value
				return 1;
			}
			
		}
		return 0;
      } 
